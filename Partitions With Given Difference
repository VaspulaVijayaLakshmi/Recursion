#include <bits/stdc++.h> 


int dp[101][100001];

const int MOD = 1e9 + 7;
	  

int subsetSum(vector<int>& arr, int k, int sum, int idx){


	if(idx==arr.size()) {

		if(sum==k) return 1;

		return 0;
	}

	if(idx>arr.size()) return 0;


    if(dp[idx][sum] !=-1) return dp[idx][sum];


	return dp[idx][sum] = (subsetSum(arr,k,sum+arr[idx],idx+1) +  subsetSum(arr,k,sum,idx+1))%MOD;
}



int countPartitions(int n, int d, vector<int> &arr) {


    int sum=0;
    for(int i=0;i<arr.size();i++)
      sum+=arr[i];
    

// ? FIX 1: check invalid partition condition
	if ((sum + d) % 2 != 0 || sum < d) return 0;
     sum = (sum+d)/2;


    memset(dp,-1,sizeof(dp));


    return subsetSum(arr,sum, 0 ,0);

    
}




// sum(s1) - sum(s2) = diff
// sum(s1) = diff + sum(s2) - we cant find like this


// but we know one thing, in subset problems/ sesequnce prblms
// sum(s1) + sum(s2) =sum(s)



// sum(s1) - sum(s2) = diff
// sum(s1) + sum(s2) =sum(s)

// 2*sum(s1) = diff + sum(s)


// so sum(s1) = (diff + sum(s) )/2

// then subset sum prblm
