class Solution {
public:
    int numDistinct(string s, string t) {
        
    }
};




// occurences of t in s

// if t reaches , 0 , tht means we found a i=occurence



// class Solution {
// public:

//     int solve(int i, int j,string&s,string&t,vector<vector<int>>&dp){
//         if(j == 0) return 1; 
//         if(i == 0) return 0; 

//         if(dp[i][j] != -1) return dp[i][j]; 


//         if(s[i-1] == t[j-1]){

    // here is a little twist, if the chars are matching, do i-1 and j-1, 
    // also include i-1 with j


//             return dp[i][j] = solve(i-1,j-1,s,t,dp) + solve(i-1,j,s,t,dp);
//         }


// if they are not equal , then i-1 , string s, since we need to match with j str
//         return solve(i-1,j,s,t,dp);
//     }


//     int numDistinct(string s, string t){

//         int n = s.size(), m = t.size(); 

//         vector<vector<int>>dp(n+1,vector<int>(m+1,-1)); 
//         return solve(n,m,s,t,dp); 
//     }
// };







