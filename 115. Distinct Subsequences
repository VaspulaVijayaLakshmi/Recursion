class Solution {
public: 

    int subsequences(string s,string t, int i,int j){
      
      if( j == t.size()) return 1;
      if( i == s.size()) return 0;

      if(s[i] == t[j]) 
          return subsequences(s,t,i+1,j+1) + subsequences(s,t,i+1,j);

       else 
          return subsequences(s,t,i+1,j);

    }


    int numDistinct(string s, string t) {

     return  subsequences(s,t,0,0);
 
    }
};





MEMOIZATION


class Solution {
public: 

    vector<vector<int>> dp;
    int subsequences(string s,string t, int i,int j){
      
      if( j == t.size()) return 1;
      if( i == s.size()) return 0;

      if(dp[i][j] != -1) return dp[i][j];

      if(s[i] == t[j]) 
          return dp[i][j] =  subsequences(s,t,i+1,j+1) + subsequences(s,t,i+1,j);

       else 
          return dp[i][j] = subsequences(s,t,i+1,j);

    }


    int numDistinct(string s, string t) {

     dp.resize(s.size(),vector<int>(t.size(),-1));
     return  subsequences(s,t,0,0);
 
    }
};






