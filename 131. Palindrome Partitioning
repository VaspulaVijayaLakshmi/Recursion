class Solution {
public:

    vector<vector<string>> res;

    bool isPalindrome(string s){

        int l=0,r=s.size()-1;
        while(l<=r){
            if(s[l] !=s[r]) return false;

            l++;
            r--;
        }

        return true;
    }

    void partition(string s,int i,string str,vector<string> temp){

        // why the condition, when the size hits we can push to res.
        // because all the substring should be a palindrome.  
        if(i==s.size()){
            res.push_back(temp);
            return;
        }

        for(int j=i ; j<s.size() ; j++){

           string sub = s.substr(i,j-i+1);

            if(isPalindrome(sub)){

             // push this into tmp substring, but towards end, this partition did not result in palindrome., so we pop and try to move forward towards another partitions
              temp.push_back(sub);
              partition(s,j+1,str,temp);
              temp.pop_back();

            }

        }

    }


    vector<vector<string>> partition(string s) {

        vector<string> temp;

      partition(s,0,"",temp);
      return res;
        
    }
};
