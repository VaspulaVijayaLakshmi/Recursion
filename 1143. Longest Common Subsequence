// TLE  
// class Solution {
// public:

//    int  lcs(string text1 ,string text2, int idx1,int idx2){

//       if( idx1==text1.size() || idx2==text2.size())
//         return 0;

//       if(text1[idx1] == text2[idx2])
//         return 1 + lcs(text1,text2,idx1+1,idx2+1);


//       else 
//          return max( lcs(text1,text2,idx1,idx2+1) ,lcs(text1,text2,idx1+1,idx2) );  

//     }
    
//     int longestCommonSubsequence(string text1, string text2) {
        
//         return lcs(text1,text2,0,0);
//     }
// };



// DP
class Solution {
public:

    int longestCommonSubsequence(string text1, string text2) {

        int n1 = text1.size();
        int n2 = text2.size();

        // n1 on x-axis
        // n2 on y-axis

       vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));

      for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){

            if(text1[i-1] == text2[j-1])
              dp[i][j] = dp[i-1][j-1] + 1;

            else 
              dp[i][j] = max(dp[i-1][j], dp[i][j-1]);

        }

    }

    return dp[n1][n2];
    }
};





//      a    c   e 

// a    1    1    1

// b    1   max((i-1,j),(i,j-1))     

// c    1

// d    1

// e    1


// we need to consider - one string and empty string condition

// both are empty strings

//DP-Intution

//     " "   a    c    e   
        
// " "  0    0    0    0   
 
//  a   0    1    1    1
 
//  b   0    1    1    1 
 
//  c   0    1    2    2 
 
//  d   0    1    2    2
 
//  e   0    1    2    3 


// if( s1[i]== s2[j]) dp[i][j] = 1+dp[i-1][j-1]

// else max(dp[i-1][j] dp[i][j-1])
