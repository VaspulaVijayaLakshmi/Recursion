//INTUITION

//the first thing that comes to mind is oddsum and even sum
//but that doesn't yield max amount
//eg:[10,1,2,15]

//even sum = [10,2] = 12
//odd sum  = [1,15] = 16

// but if we choose [10,15] = 25 //maximum we can rob

//so the condition in the ques is we can't rob 2 adjacent houses
//but its not necessarily mean we have to rob two alternate houses
//whatever we choose shouldn't be adjancent that's that.


class Solution {
public:

int dp[100];

    int helper(vector<int> &nums){

      memset(dp,-1,sizeof(dp));

      dp[0] =nums[0];
      dp[1] = max(nums[0],nums[1]);

      for(int i=2;i<nums.size();i++){

        dp[i] = max( dp[i-1], nums[i] + dp[i-2]);
      }

      return dp[nums.size()-1];

    }


    int rob(vector<int>& nums) {

        // we can include first element, then exclude last elemnt
        //  or u can exclude first eleemnt then u can include last element


       int n = nums.size();
       if(n==0 ) return 0;

       if(n==1) return nums[0];

       if(n==2) return max(nums[0],nums[1]);
       
        vector<int> nums1(nums.begin()+1,nums.end()) ;
        vector<int> nums2(nums.begin(),nums.end()-1) ;

        return  max(helper(nums1),helper(nums2));


        
    }
};
