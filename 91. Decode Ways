class Solution {

    public :

    int numDecoding(string s,int idx){

       if(idx >= s.size()) return 1; 
  
        int count=0;

        // substr of len 1
        // if s[i] =0 we dnt form a one length substr of len 1, '0'
        if(s[idx] !='0' )
        count += numDecoding(s,idx+1); 

        // substr of len 2

        // idx>0
        //  s[idx] ==1 then my curr num can be from 0-9
        //  s[idx+1] == 2 then my curr num should be from 0-6
       if( idx<s.size()-1 ){
        if( s[idx] == '1' || (s[idx] == '2' && s[idx+1] <= '6'))
           count+=numDecoding(s,idx+2);
       }
    
       return count;

    }



     int numDecodings(string s) {

        if(s[0] == '0') return 0;

        return numDecoding(s,0);
    }
};





// 12 =>  1  2  -> A B
//        12    -> L
       
//        ____________
       
// 106 => 1   0   6  -> no    no word for 0
//        10      6  -> JF
//        1      06  -> NO
       
//      _________________  
       
       
// 456 => 4   5   6  ->  DEF
//        45      6  ->  N0   45>26(alphabets are from 1 to 26,
//                                  so no word can be formed with 45)

//        4       56  -> No  
       
//    _____________________    
       

// 226 => 2   2   6  -> BBF   
//        22      6  -> VF
//        2      26  -> BZ




    //    at every letter, we need tp consider the number itself 
    //    or prev+this number

    //  Eg: 17 ->    at 1 consider 1
                //   at 7 consider 7 itself and  17
                //   but there r few conditions 

                // like prevnumber is 2 , then theres no 27
                // so if curr number is 1-6, then prev number cna be 2
                // or else it can be anything bwteen 1-9




    //    21

    //    2
    //    call 1 , for one calculate 1 and 21


    //    127

    //    1 
    //    2 and 12 - here we need to call 2 times
    //    7 and 27(27 is nt present)








MEMOIZATION 



class Solution {

    public :

    vector<int> dp;

    int numDecoding(string s,int idx){

       if(idx >= s.size()) return 1; 

       if(dp[idx]!=-1) return dp[idx];
  
        int count=0;

        // substr of len 1
        // if s[i] =0 we dnt form a one length substr of len 1, '0'
        if(s[idx] !='0' )
        count += numDecoding(s,idx+1); 

        // substr of len 2

        // idx>0
        //  s[idx] ==1 then my curr num can be from 0-9
        //  s[idx+1] == 2 then my curr num should be from 0-6
       if( idx<s.size()-1 ){
        if( s[idx] == '1' || (s[idx] == '2' && s[idx+1] <= '6'))
           count+=numDecoding(s,idx+2);
       }
    
       return dp[idx] = count;

    }



     int numDecodings(string s) {

        if(s[0] == '0') return 0;

        dp.resize(s.size(),-1);

        return numDecoding(s,0);
    }
};
