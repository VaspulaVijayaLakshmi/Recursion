recursive

class Solution {
public:
    
    void generateSubsets(vector<int>& nums,vector<vector<int>> &res,
                         vector<int> &temp,int currIdx){
        
    if(currIdx==nums.size()){
       res.push_back(temp);

       return;

    }  

    temp.push_back(nums[currIdx]);
    generateSubsets(nums,res,temp,currIdx+1);
    
    temp.pop_back();
    generateSubsets(nums,res,temp,currIdx+1);
        
   
    }
     
    
    vector<vector<int>> subsets(vector<int>& nums) {
       
         vector<vector<int>> res;
         vector<int> temp;
        
        generateSubsets(nums,res,temp,0);
        return res;
        
    }
};








iterative

class Solution {
public:

    //  iterative
    void generateSubsets(vector<int>& nums,vector<vector<int>> &res,
                         vector<int> &temp,int currIdx){
        

       res.push_back(temp);

    for(int i=currIdx;i<nums.size();i++){  

       temp.push_back(nums[i]);
       generateSubsets(nums,res,temp,i+1);   
       temp.pop_back();

    }

    }

    
    vector<vector<int>> subsets(vector<int>& nums) {
       
         vector<vector<int>> res;
         vector<int> temp;
        
        generateSubsets(nums,res,temp,0);
        return res;
        
    }
};







                            []
                          /   |   \
                        [1]  [2]  [3]
                       /  \   |     \
                   [1,2] [1,3] [2,3]  \
                   /                  \
              [1,2,3]                (end)





