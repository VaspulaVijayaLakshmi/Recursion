TLE
int subsetSum(vector<int>& arr, int k, int sum, int idx){

// if we just , return it here, it wont explore the beyond possibilities
	// if(sum==k) return 1;

	if(idx==arr.size()) {

		if(sum==k) return 1;

		return 0;
	}

	if(idx>=arr.size()) return 0;

// we should not include, sum>k return 0 as, if sum>k we should exclude and continue, not return and terminate

	// if(idx>=arr.size() || sum>k) return 0;

	return subsetSum(arr,k,sum+arr[idx],idx+1) +  subsetSum(arr,k,sum,idx+1);
}




int findWays(vector<int>& arr, int k)
{
	// Write your code here.

  int sum=0;
	for(int i=0;i<arr.size();i++)
	 sum+=arr[i];


	 if(sum<k) return 0;

	return subsetSum(arr,k,0,0);

}







MEMO




int dp[101][10001];

const int MOD = 1e9 + 7;
	  

int subsetSum(vector<int>& arr, int k, int sum, int idx){


	if(idx==arr.size()) {

		if(sum==k) return 1;

		return 0;
	}

	if(idx>arr.size()) return 0;


    if(dp[idx][sum] !=-1) return dp[idx][sum];


	return dp[idx][sum] = (subsetSum(arr,k,sum+arr[idx],idx+1) +  subsetSum(arr,k,sum,idx+1))%MOD;
}




int findWays(vector<int>& arr, int k)
{
	// Write your code here.

  int sum=0;
	for(int i=0;i<arr.size();i++)
	 sum+=arr[i];


	 if(sum<k) return 0;

	 memset(dp,-1,sizeof(dp));

	return subsetSum(arr,k,0,0);


}
