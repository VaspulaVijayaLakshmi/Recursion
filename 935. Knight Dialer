Recursion -TLE

class Solution {
public:

// the vector represents on 0 -th idx - 0th pad - it can move to 8 and 6...
    vector<vector<int>> moves =   { {4,6},{8,6},{7,9},{8,4},{3,9,0},{},{1,7,0},{6,2},{1,3},{2,4} };


    int knightDailer(int digit, int n){

// if n exhausted, we formed a word
        if(n==0) return 1;

        // now lets say we r on 'x' digit, we need to moves to all the pos, we
        // can move from this didigt, tht is in moves vector
        int count=0;
        for(auto move : moves[digit]){

            // move to nxt pos, decrement the count of n
           count += knightDailer(move, n-1);
        }

        return count;

    }


    int knightDialer(int n) {

        if(n==1) return 10;

     int ans=0;
    for(int digit=0;digit<=9;digit++){

// since we cant go anywhere from 5
        if(digit==5 ) continue; 

        ans +=knightDailer(digit,n-1);
    }

    return ans;
   
    }
};


// the set of moves by knight is limited and - 
// i/e, the points we can move from each number is forseable

// so instead of the calculating on the fly, u can store the moves



// From 0 I can move to  --> 4,6
// 1 --> 8,6
// 2 --> 7,9
// 3 --> 8,4
// 4 --> 3,9,0
// 5 --> 
// 6 --> 1,7,0
// 7 --> 6,2
// 8 --> 1,3
// 9 --> 2,4


// How to keep track of visited , Thinking to maintain a map

// also we need to put on knight on 0 , find the valid numbers of length n 
// and place on 1 then repeat




            // if im cmg from 3 - 8, when i move to 8, 3 is also one of my  possibility
            // i should not go bak to parent

            // but this case is not needed in this qiesion, they want all unique poosibilities
