https://www.naukri.com/code360/problems/fractional-knapsack_975286?leftPanelTabValue=PROBLEM

#include <bits/stdc++.h> 



// for fractonal knasack we need to sort by value:weight arr

// what if we sort array by value ?

//   we pick most expensive items, but in few cases ,
// we may end up picking heavy items first with heavty weight and more value



// but sometimes there can be scenarios where- lighter object even though their val might be less
// but we can take more numbe of times//

// so take value per unit weight.


bool compareByValue(pair<int, int> a, pair<int, int> b) {
     double r1 = (double)a.second / a.first;
    double r2 = (double)b.second / b.first;
    return r1 > r2;
}


double maximumValue (vector<pair<int, int>>& items, int n, int w)
{

    // sort array by profits
    // array and weight pair u make and custokm sort

    // take max profit each time and reduce the weight.

    // sort array by value
    sort(items.begin(), items.end(), compareByValue);
    // ITEMS contains {weight, value} pairs.

    double profit=0.0;

    for(int i=0;i<items.size() && w>0;i++){

        int wt = items[i].first;
        int val = items[i].second;

        if(wt<=w){
           
           w = w-wt;
           profit+= val;

        }

        else{

            // if(w>wt) then div results in 0 portions if we divide directly
        
          profit +=  ((double)val / wt ) * w;
          w=0;
        }

        
    }

    return profit;


}


// best say weight - 10 
// my currw is 2 and value is 5 , so how many portions i can take;


// 10/2 =5


// wt = 10


// portion - 10/2 - 5

// pr0fit - 5 * 5 =25

// w = 10- 5 = 5
