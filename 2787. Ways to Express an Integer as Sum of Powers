class Solution {
public:

   int numberOfWays(int n,int x,int limit, int currlim,int sqsum){
  
   if(sqsum==n) return 1;
    if(currlim>limit || sqsum>n) return 0;


    // dont pick
    int dontpick = numberOfWays(n,x,limit,currlim+1,sqsum);

    //  pick 
    // if currsum+pow of (1/2/3) ^x ) is less than n
    int pick=0;
    if(sqsum + pow(currlim,x) <= n)
      pick=  numberOfWays(n,x,limit,currlim+1,sqsum + pow(currlim,x));


    return pick+dontpick;

   }

    

    int numberOfWays(int n, int x) {

       int limit = (int)round(pow(n, 1.0 / x));

    //    int limit = pow(n, 1.0 / x);
// You're relying on pow() and 1.0 / x, which returns a double, so:
// pow(64, 1.0 / 3) â‰ˆ 3.99999999
// Then this gets truncated to 3 when assigned to an int.

// But actually, 4^3 = 64, so you should be considering up to 4, not 3.

        return numberOfWays(n,x,limit,1,0);
        
    }
};



// n=10 x=2

// sqrt(10) = ~3.1 = 3

// so we need to go from 1 to 3

// 1^2 + 2^2 + 3^2

// now i have to see - 1^2 + 2^2
//                     2^2 + 3^2
//                     1^2 + 3^2
//                     1^2 + 2^2 + 3^2

//                     out of all these which would result in 10




//  if its cuberoot, then consider only element upto cuberoot(n)                   


// pow of unique posiite intergers - cant take elemnts twice









MEMO


class Solution {
public:
    const int MOD = 1e9 + 7;
    vector<vector<long long>> dp;

    long long numberOfWays(int n, int x, int limit, int curr, int sum) {
        if (sum == n) return 1;
        if (curr > limit || sum > n) return 0;

        if (dp[sum][curr] != -1) return dp[sum][curr];

        long long power = pow(curr, x);

        long long dontPick = numberOfWays(n, x, limit, curr + 1, sum) % MOD;

        long long pick = 0;
        if (sum + power <= n)
            pick = numberOfWays(n, x, limit, curr + 1, sum + power) % MOD;

        return dp[sum][curr] = (pick + dontPick) % MOD;
    }

    int numberOfWays(int n, int x) {
        int limit = (int)round(pow(n, 1.0 / x));
        dp.assign(n + 1, vector<long long>(limit + 1, -1));
        return numberOfWays(n, x, limit, 1, 0);
    }
};

