class Solution{
public:
   
bool wordBreak(string s, vector<string> &dict) {
    
 unordered_set<string> st;   
 for(string &s1:dict) 
     st.insert(s1);
    
  return wordBreak( s,0, st);
	
}
    
    
    bool wordBreak(string s,int i, unordered_set<string> &dict) {
        
        if(i==s.size()) return true ;

        for(int j=i;j<s.size();j++){
            string substr = s.substr(i,j-i+1);
            if(dict.find(substr) != dict.end()){
            
             if( wordBreak(s,j+1,dict))
              return true;

            }

        }

        return false;
    }    
     
};



// s = "leetcode" wordDict = ["lee", "leet", "code"]

// so while partioning its possible tht we may split at "lee", now we have to 
// traverse till the end, to spilit it and we will not find any t, tc,tco,tcode

// so we need to traverse back and split at someother place
// like "leet", then i can split at code



// so this is a backtracking  problem
            
//  so the question is : do we need  to return if somee split returns
// false, no, we dont, we will split at some other place.











// Memoization

class Solution{
public:
   
   vector<bool> dp;

bool wordBreak(string s, vector<string> &dict) {
    
 unordered_set<string> st;   
 for(string &s1:dict) 
     st.insert(s1);

     dp.resize(s.size()+1,false);
    //  empty string
     dp[0] = true;
    
  return wordBreak( s,0, st);
	
}

// dp[i] - if there exists a substr 
//  the substr from 0-i , can be splitted to this point

    
    
    bool wordBreak(string s,int i, unordered_set<string> &dict) {
        
        if(i==s.size()) return true ;

// in memoization, we need to store the result after everthing finishes
// so we will need to store ans in some variable
        for(int j=i;j<s.size();j++){
            string substr = s.substr(i,j-i+1);
            if(dict.find(substr) != dict.end()){
            
             if( wordBreak(s,j+1,dict))
              return dp[i] = true;

            }

        }

        return dp[i] = false;
    }    
     
};



DP




class Solution{
public:
   
   vector<bool> dp;

bool wordBreak(string s, vector<string> &dict) {
    
 unordered_set<string> st;   
 for(string &s1:dict) 
     st.insert(s1);

     dp.resize(s.size()+1,false);
     dp[0] = true;

     for(int i=1;i<=s.size();i++){
        for(int j=i-1;j>=0;j--){

// last substr , until when it was true, we will form a new substr
            if(dp[j]){

                // lets say dp[j] is true
                // - that means we need to form a substr 
                // from j+1 to i now
                // and check if tht exists in dict

                // so even if dp[j] - true but the substr is not present in 
                // dict, we still contine forming substrings, until its prsent in dict


                string word = s.substr(j,i-j);
                if(st.find(word) != st.end()){

                    dp[i] = true;
                    // break;   we need tobreak to strt from new str
                }

            }


        }
     }


    
  return dp[s.size()];
    
}        
        
};



// dp, we will build such tht,  idx i, represents if the sr so
//  far can be breaked or not


// 1D array

// "" l e e t c o d e
// T  _ _ _ _ _ _ _ _

// and my dict - ["lee", "leet" , "code"]


// till l , no, 
//  le - no
//  lee - yes(present in dict) -> 2 options now , 
//                       -> we can split here itself, so the next str could strting fromnnew
//                       -> i.e, we can strt  if new substr , 't' is in dict
//                       -> or 'tc' is in dict...like tht


//                       (or) we can continue thi curr subsre only



        
//         l e e t c o d e

//         F F T Y 

//         now at T, its true, so nxt substr could strt new substr , t
//         't' is not present

//         come back each step 'te' - No
//         "tee" - no
//         "leet" _yes

//         now frokm c I can str new substr or go back eachstep and heck if
//         "ct" , "cte","ctee","cteel"
// ......


                       
             



//  leet - yes



