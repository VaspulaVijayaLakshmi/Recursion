// TLE
// class Solution {
// public:

//     int uniquePathsWithObstacles(vector<vector<int>>& grid,int x,int y,int n,int m){

//        if(x<0 || y<0 || x>=n || y>=m || grid[x][y] == 1 )
//         return 0;

//        if(x == n-1 && y == m-1) return 1;

//         grid[x][y]=1;
      
//      int right = uniquePathsWithObstacles(grid, x, y+1 ,n ,m);
//      int down  = uniquePathsWithObstacles(grid, x+1 , y ,n ,m);

//      grid[x][y] = 0;
//      return right + down;

//     }


//     int uniquePathsWithObstacles(vector<vector<int>>& grid) {

//         int n= grid.size();
//         int m= grid[0].size();
        
//         return uniquePathsWithObstacles(grid,0,0,n,m);
        
//     }
// };




// DP


class Solution {
public:

    int uniquePathsWithObstacles(vector<vector<int>>& grid) {

        int n= grid.size();
        int m= grid[0].size();

        vector<vector<int>> dp(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++){

           if(grid[i][0]==1) break;
           dp[i][0] = 1;

        }

        for(int j=0;j<m;j++){

           if(grid[0][j]==1) break;
           dp[0][j] = 1;

        }


        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){

                if(grid[i][j]==1)
                    dp[i][j] = 0;
                
                else
                 dp[i][j]=dp[i-1][j] + dp[i][j-1];

            }
        }

        return dp[n-1][m-1];
        
    }
};
