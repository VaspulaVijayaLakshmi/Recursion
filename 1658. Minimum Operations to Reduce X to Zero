// // TLE
// class Solution {
// public:

//     int recOperations(vector<int> &nums, int strt, int end, int x, int sum, int op) {
        
//         // if sum has reached to x, then return operations
//         if (sum == x) return op;

//         // if sum exceeds or no elements left
//         if (sum > x || strt > end) return -1;

//         int pickLeft = INT_MAX, pickRight = INT_MAX;

//         // pick from left
//         if (sum + nums[strt] <= x) {
//             int leftOps = recOperations(nums, strt + 1, end, x, sum + nums[strt], op + 1);
//             if (leftOps != -1) pickLeft = leftOps;
//         }

//         // pick from right
//         if (sum + nums[end] <= x) {
//             int rightOps = recOperations(nums, strt, end - 1, x, sum + nums[end], op + 1);
//             if (rightOps != -1) pickRight = rightOps;
//         }

//         int ans = min(pickLeft, pickRight);
//         return (ans == INT_MAX) ? -1 : ans;
//     }

//     int minOperations(vector<int>& nums, int x) {
//         return recOperations(nums, 0, nums.size() - 1, x, 0, 0);
//     }
// };


// TLE
// class Solution {
// public:
//     int minOperations(vector<int>& nums, int x) {
//         return dfs(nums, 0, nums.size() - 1, x, 0);
//     }

// private:
//     int dfs(vector<int>& nums, int left, int right, int x, int ops) {
//         if (x == 0) return ops;
//         if (x < 0 || left > right) return -1;

//         int pickLeft = dfs(nums, left + 1, right, x - nums[left], ops + 1);
//         int pickRight = dfs(nums, left, right - 1, x - nums[right], ops + 1);

//         if (pickLeft == -1 && pickRight == -1) return -1;
//         if (pickLeft == -1) return pickRight;
//         if (pickRight == -1) return pickLeft;

//         return min(pickLeft, pickRight);
//     }
// };



//  simply reframing the question, we can come up with an O(n)
//  complexity solution. 
 
//  The difficulty in this question arises from deciding whether to 
//  choose the left or the right element to remove at any given point. 
//  However, while we're removing elements from the array, we're definitely going to be letting some elements remain as well. 
//  In particular, the middle elements.

// Therefore, to find the minimum number of elements to remove, we can find the maximum number of elements to not remove!

// we focus on finding the longest subarray in the middle. One main thing to note is that our subarray should sum to sum - x (where sum is the sum of all elements in our array).


//  https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/solutions/2136570/change-your-perspective-java-explanation/
