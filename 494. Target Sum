class Solution {
public:

    int findTargetSumWays(vector<int>& nums, int target,int sum,int idx) {

     if(idx==nums.size()){

        if(sum==target) return 1;
        return 0;

     }  

     int plusSign =  findTargetSumWays(nums,target,sum+nums[idx],idx+1);
     int minusSign = findTargetSumWays(nums,target, (sum+(-1)*nums[idx]),idx+1);

     return plusSign + minusSign ;
        
    }

    int findTargetSumWays(vector<int>& nums, int target) {

        return findTargetSumWays(nums,target,0,0);
        
    }
};



// we cant exclude - because we have to use all nums
// include - +sign and - sign




DP





class Solution {
public:



// WHen memoizing , we may have , -ve values sum. 



// To handle negative sums in the dp table, we shift indices
//  using the total sum of the array (range). 


//  The possible sum values range from -totalSum (all numbers negative)  to +totalSum (all numbers positive), 
// covering 2 * totalSum + 1 values. 

//  By adding totalSum to each sum, we shift all values into a positive index range,
//   making them valid for the dp table.


    vector<vector<int>> dp;
    int range;

    int findTargetSumWays(vector<int>& nums, int target,int sum,int idx) {

     if(idx==nums.size()){

        if(sum==target) return 1;
        return 0;

     }  

     if(dp[idx][sum+range] != -1) return dp[idx][sum+range];

     int plusSign =  findTargetSumWays(nums,target,sum+nums[idx],idx+1);
     int minusSign = findTargetSumWays(nums,target, (sum+(-1)*nums[idx]),idx+1);

     return dp[idx][sum+range] = plusSign + minusSign ;
        
    }

    int findTargetSumWays(vector<int>& nums, int target) {

        int totalSum = accumulate(nums.begin(), nums.end(), 0);
        range = totalSum;

        dp.assign(nums.size(), vector<int>(2*totalSum+1,-1));

        return findTargetSumWays(nums,target,0,0);
        
    }
};



// we cant exclude - because we have to use all nums
// include - +sign and - sign
